// iniwriter.cc
//#define DEBUG

#include "iniwriter.h"

#include <iostream>
#include <string>
#include "inidata.h"
#include "keyvalue.h"
#include "section.h"

using std::string;
using std::ostream;
using std::endl;

namespace parser {

namespace inner {

IniWriter::IniWriter() : comment_char_(';'), delimiter_char_('=') {
  outputstream_ = &std::cout;
}

void IniWriter::VisitData(const IniData& inidata) const {
  //*outputstream_<<comment_char_<<"generated by iniparser";
}

void IniWriter::VisitSection(const Section& section) const {
  if (section.isdeleted()) return;

  //if(section.name() && *section.name() == "") return;
  *outputstream_<<"["<<*section.name()<<"]"<<endl;;
}

void IniWriter::VisitKeyValue(const KeyValue& keyvalue) const {
  if (keyvalue.isdeleted()) return;

  const string *key = keyvalue.key();
  const string *value = keyvalue.value();
  if (key && *key != "") {
    *outputstream_<<*key<<" ";
  }
  if (value && *value != "") {
    *outputstream_<<delimiter_char_<<" "<<*value;
  }
  *outputstream_<<endl;
}

void IniWriter::set_comment_char(char comment_char) {
  comment_char_ = comment_char;
}

void IniWriter::set_delimiter_char_(char delimiter_char) {
  delimiter_char_ = delimiter_char;
}

void IniWriter::set_outputstream(ostream& outputstream) {
  outputstream_ = &outputstream;
}

} // namespace inner
} // namespace parser
